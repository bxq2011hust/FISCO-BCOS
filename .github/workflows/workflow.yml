name: FISCO-BCOS GitHub Actions
on:
  push:
    branches-ignore:
      - "**-1.3"
      - "**-1.5"
    tags-ignore:
      - v1.*
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published, created, edited]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: check commit
        if: ${{ runner.os == 'Linux' && github.base_ref != 'master' && github.event_name == 'pull_request' }}
        run: bash tools/ci/check-commit.sh
      - uses: actions/cache@v2
        id: cache
        with:
          path: deps/src
          key: deps-v8-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            deps-v8-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            deps-v8-${{ runner.temp }}-${{ github.base_ref }}-
            # deps-v8-${{ runner.temp }}-
      - uses: actions/cache@v2
        id: ccache
        with:
          path: ccache
          key: ccache-v3-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            ccache-v3-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            ccache-v3-${{ runner.temp }}-${{ github.base_ref }}-
            ccache-v3-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install openssl@1.1 ccache gmp automake
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.47.0
      - name: install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y git curl build-essential clang cmake libssl-dev zlib1g-dev ccache libgmp-dev flex bison patch
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.47.0
      - name: configure
        run: source $HOME/.cargo/env && CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DTESTS=ON .
      - name: compile
        run: make -j2
      - name: run uint tests
        run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
  macOS_integration_test:
    name: build_integration_test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: deps/src
          key: deps-v6-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            deps-v6-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            deps-v6-notest-${{ runner.temp }}-${{ github.base_ref }}-
            # deps-v6-notest-${{ runner.temp }}-
            # deps-v6-${{ runner.temp }}-
      - uses: actions/cache@v2
        id: ccache
        with:
          path: ccache
          key: ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            ccache-v2-notest-${{ runner.temp }}-
      - name: install macOS dependencies
        run: brew install openssl@1.1 ccache automake
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.47.0
          override: true
      - name: configure
        run: source $HOME/.cargo/env && cmake .
      - name: compile
        run: make -j2
      - name: run integration testing
        run: cd tools && bash ci/ci_check.sh
      - name: tar fisco-bcos for macOS
        run: cp tools/build_chain.sh bin/ && cd bin && strip fisco-bcos && tar -zcf fisco-bcos.tar.gz fisco-bcos build_chain.sh
      - uses: actions/upload-artifact@v2
        with:
          name: fisco-bcos-macOS.tar.gz
          path: bin/fisco-bcos.tar.gz

  ubuntu16_integration_test:
    name: ubuntu16_integration_test
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: deps/src
          key: deps-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            deps-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            deps-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-
            deps-v4-notest-${{ runner.temp }}-
            deps-v4-${{ runner.temp }}-
      - uses: actions/cache@v2
        id: ccache
        with:
          path: ccache
          key: ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            ccache-v2-notest-${{ runner.temp }}-
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.47.0
          override: true
      - name: install ubuntu dependencies
        run: sudo apt install -y git curl build-essential clang cmake openssl libssl-dev zlib1g-dev ccache libgmp-dev flex bison
      - name: install gcc 7
        run:
          sudo apt install -y software-properties-common && sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update && sudo apt-get install libltdl-dev g++-7 gcc-7 -y &&
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7 --slave /usr/bin/gcov gcov /usr/bin/gcov-7 --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-7 --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-7 --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-7 --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-7
      - name: configure
        run: source $HOME/.cargo/env && cmake .
      - name: compile
        run: make -j2
      - name: run integration testing
        run: cd tools && bash ci/ci_check.sh

  ubuntu20_integration_test:
    name: ubuntu20_test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: deps/src
          key: deps-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            deps-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            deps-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            deps-v2-notest-${{ runner.temp }}-
            deps-v2-${{ runner.temp }}-
      - uses: actions/cache@v2
        id: ccache
        with:
          path: ccache
          key: ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            ccache-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            ccache-v2-notest-${{ runner.temp }}-
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.47.0
          override: true
      - name: install ubuntu dependencies
        run: sudo apt install -y git curl build-essential clang cmake openssl libssl-dev zlib1g-dev ccache libgmp-dev flex bison automake libtool
      - name: configure
        run: source $HOME/.cargo/env && cmake . -DBUILD_STATIC=ON
      - name: compile
        run: make -j2
      - name: run integration testing
        run: cd tools && bash ci/ci_check.sh
      - name: tar fisco-bcos for Linux
        run: cp tools/build_chain.sh bin/ && cd bin && strip fisco-bcos && tar -zcf fisco-bcos.tar.gz fisco-bcos build_chain.sh
      - uses: actions/upload-artifact@v2
        with:
          name: fisco-bcos.tar.gz
          path: bin/fisco-bcos.tar.gz
